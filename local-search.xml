<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>显卡直通方案</title>
    <link href="/2025/07/30/%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E6%96%B9%E6%A1%88/"/>
    <url>/2025/07/30/%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h3 id="安装所需要软件"><a href="#安装所需要软件" class="headerlink" title="安装所需要软件"></a>安装所需要软件</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">paru -S read-edid qemu libvirt edk2-ovmf virt-manager dnsmasq ebtables iptables bridge-utils gnu-netcat looking-glass looking-glass-<span class="hljs-keyword">module</span>-dkms<br></code></pre></td></tr></table></figure><h3 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo usermod -<span class="hljs-selector-tag">a</span> -G libvirt-qemu,libvirt,kvm user<br></code></pre></td></tr></table></figure><p>其中user为自己的用户名</p><h3 id="启用并设置虚拟机服务和虚拟网卡开机自启"><a href="#启用并设置虚拟机服务和虚拟网卡开机自启" class="headerlink" title="启用并设置虚拟机服务和虚拟网卡开机自启"></a>启用并设置虚拟机服务和虚拟网卡开机自启</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">enable</span> <span class="hljs-comment">--now libvirtd virtlogd.socket</span><br>sudo virsh net-<span class="hljs-keyword">start</span> <span class="hljs-keyword">default</span><br>sudo virsh net-autostart <span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><h3 id="编辑qemu配置文件"><a href="#编辑qemu配置文件" class="headerlink" title="编辑qemu配置文件"></a>编辑qemu配置文件</h3><p>编辑&#x2F;etc&#x2F;libvirt&#x2F;qemu.conf<br>把user &#x3D; “ “ 这行和group &#x3D; “ “ 这行取消注释<br>在user &#x3D; “ “ 中填入自己的用户名<br>在group &#x3D; “ “ 中填入libvirt</p><p><img src="/images/1.png" alt="图1"><br>重启libvirt服务</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo systemctl restart libvirtd virtlogd.<span class="hljs-built_in">socket</span><br></code></pre></td></tr></table></figure><h1 id="二、创建一个非直通的虚拟机"><a href="#二、创建一个非直通的虚拟机" class="headerlink" title="二、创建一个非直通的虚拟机"></a>二、创建一个非直通的虚拟机</h1><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>打开virt-manager新建虚拟机<br><img src="/images/2.png" alt="图2"><br>选择win的iso，并手动选择对应的操作系统<br><img src="/images/3.png" alt="图3"><br>内存看情况设置，但是建议不要超过宿主机物理内存的80%<br>cpu无须关注后续会再次设置<br><img src="/images/4.png" alt="图4"><br>按需要设置镜像大小<br>注:不会直接占用空间<br><img src="/images/5.png" alt="图5"><br>选择在安装前自定义配置<br><img src="/images/6.png" alt="图6"><br>选择固件如图所示(在virt-manager中的一切操作需要手动点击apply确认)<br><img src="/images/7.png" alt="图7"><br>手动设置cpu拓扑<br>一般情况下嵌套字都填1<br>核心数按需分配(不要超过物理核心数)<br>线程数应与物理cpu线程数相同<br><img src="/images/8.png" alt="图8"><br>硬盘总线和网卡型号选择virtIO<br><img src="/images/9.png" alt="图9"><br><img src="/images/10.png" alt="图10"><br>添加硬件<br>选择储存<br>设备类型选择CDROM设备<br>选中下载的<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso">virtio-win驱动</a><br><img src="/images/11.png" alt="图11"><br>接着添加tpm设备选择直通<br><img src="/images/12.png" alt="图12"></p><h3 id="编辑XML"><a href="#编辑XML" class="headerlink" title="编辑XML"></a>编辑XML</h3><p>在&lt;&#x2F;features&gt;的上方添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">kvm</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">hidden</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&#x27;on&#x27;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">kvm</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并且在cpu中插入如下代码,这可以避免后续loogking-glass的问题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;feature <span class="hljs-attribute">policy</span>=<span class="hljs-string">&#x27;disable&#x27;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;hypervisor&#x27;</span>/&gt;<br>&lt;maxphysaddr <span class="hljs-attribute">mode</span>=<span class="hljs-string">&#x27;passthrough&#x27;</span> <span class="hljs-attribute">limit</span>=<span class="hljs-string">&#x27;40&#x27;</span>/&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/14.png" alt="图14"><br>开始安装<br>一定要选择专业版方便后续操作<br>选择加载驱动<br><img src="/images/15.png" alt="图15"><br>选择win11驱动<br>按正常流程安装windows<br><img src="/images/16.png" alt="图16"><br>按SHIFT + F10召唤cmd并且输入</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">OOBE<span class="hljs-string">\BYPASSNRO</span><br></code></pre></td></tr></table></figure><p>来跳过联网验证<br><img src="/images/17.png" alt="图17"><br>接下来继续按正常流程安装windows<br>不要设置密码<br>安装如下两个驱动，无须进行更改<br><img src="/images/19.png" alt="图19"></p><h1 id="三、正式开始直通"><a href="#三、正式开始直通" class="headerlink" title="三、正式开始直通"></a>三、正式开始直通</h1><h3 id="编译并安装IDD驱动"><a href="#编译并安装IDD驱动" class="headerlink" title="编译并安装IDD驱动"></a>编译并安装IDD驱动</h3><p>安装Visual Studio并安装使用C++的桌面开发 (MSVC)、通用Windwos平台开发 (Windows SDK)<br>接着点修改-&gt;单个组建-&gt;安装MSVC Spectre缓解库和WDK<br>在<a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk#download-icon-step-3-install-wdk">文章</a>中找到WDK最新版本并下载安装<br>下载<a href="https://github.com/LostAttractor/IndirectDisplay">此项目</a>用vs打开.sln后缀文件<br>打开IddSampleDriver中的Driver.cpp并按需编辑<br>在s_SampleResolutionList[]{}中添加自己所需的分辨率,例如{2560,1600}<br>接着在s_SampleVSyncList[]{}中添加自己所需的刷新率,例如240<br>继续在s_SampleDefaultModes[]{}中添加自己所需的分辨率和刷新率的组合,例如{ 2560, 1600, 240 }<br>执行以下命令获取显示器的edid备用</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">sudo</span> <span class="hljs-built_in">get-edid</span> | <span class="hljs-string">tail</span> -<span class="hljs-string">c</span> <span class="hljs-string">256</span> | <span class="hljs-string">hexdump</span> -<span class="hljs-string">v</span> -<span class="hljs-string">e</span> <span class="hljs-string">&#x27;16/1 &quot;0x%02X,&quot; &quot;\n&quot;&#x27;</span><br></code></pre></td></tr></table></figure><p>接着找到s_SampleMonitors[]{}把里面的内容全部删去换成</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dns">static const struct IndirectSampleMonitor s_SampleMonitors[] =<br>&#123;<br>    &#123;<br>        &#123;<br>/*<br>            命令获取的edid的前<span class="hljs-number">8</span>行,例如<br>            <span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0x00,0x06</span>,<span class="hljs-number">0</span>xAF,<span class="hljs-number">0</span>xAE,<span class="hljs-number">0</span>x8F,<span class="hljs-number">0</span>xA1,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0x00,0x00</span>,<br>            <span class="hljs-number">0</span>x0E,<span class="hljs-number">0x22,0x01</span>,<span class="hljs-number">0</span>x04,<span class="hljs-number">0</span>xA5,<span class="hljs-number">0x22,0x16</span>,<span class="hljs-number">0x78,0x03</span>,<span class="hljs-number">0</span>xEE,<span class="hljs-number">0</span>x95,<span class="hljs-number">0</span>xA3,<span class="hljs-number">0</span>x54,<span class="hljs-number">0</span>x4C,<span class="hljs-number">0x99,0x26</span>,<br>            <span class="hljs-number">0</span>x0F,<span class="hljs-number">0x50,0x54</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x01</span>,<span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0</span>x01,<br>            <span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0x01,0x01</span>,<span class="hljs-number">0</span>xBF,<span class="hljs-number">0</span>xDE,<span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>xA0,<span class="hljs-number">0</span>xA0,<span class="hljs-number">0x40,0x66</span>,<span class="hljs-number">0x67,0x30</span>,<span class="hljs-number">0</span>x20,<br>            <span class="hljs-number">0</span>xF6,<span class="hljs-number">0</span>x0C,<span class="hljs-number">0</span>x58,<span class="hljs-number">0</span>xD7,<span class="hljs-number">0x10,0x00</span>,<span class="hljs-number">0x00,0x18</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>x0F,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<br>            <span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x20</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<br>            <span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x00,0x03</span>,<br>            <span class="hljs-number">0</span>x00,<span class="hljs-number">0</span>x0D,<span class="hljs-number">0</span>x24,<span class="hljs-number">0</span>xFF,<span class="hljs-number">0</span>x15,<span class="hljs-number">0</span>x3C,<span class="hljs-number">0</span>xFA,<span class="hljs-number">0x35,0x10</span>,<span class="hljs-number">0</span>x42,<span class="hljs-number">0</span>xFA,<span class="hljs-number">0x00,0x00</span>,<span class="hljs-number">0x20,0x01</span>,<span class="hljs-number">0</span>xBD,<br>*/        <br>        &#125;,<br>        &#123;<br>//          所需的分辨率和刷新率组合,例如  <br>//            &#123; <span class="hljs-number">2560</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">240</span> &#125;,            <br>        &#125;,<br>        <span class="hljs-number">0</span><br>    &#125;,<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>接着注释或删除#define EDID_LESS<br>项目-&gt;属性-&gt;c&#x2F;c++ -&gt;代码生成-&gt;运行库-&gt;多线程(&#x2F;MT)-&gt;确定<br>生成-&gt;生成解决方案<br>打开构建目录找到IddSampleDriver.cer安装证书-&gt;本地计算机-&gt;将所有的证书都放入下列存储-&gt;浏览-&gt;受信任的根证书颁发机构<br><img src="/images/22.png" alt="图22"><br>进入IddSampleDriver目录找到IddSampleDriver.inf文件并安装<br>接着返回上级目录<br>找到IddSampleApp.exe右键-&gt;属性-&gt;兼容性-&gt;以管理员身份允许此程序<br>来默认申请以管理员权限运行<br>键入win+R输入taskschd.msc<br>创建基本任务-&gt;给任务取个名-&gt;触发器：计算机启动时-&gt;操作：启动程序-&gt;启动程序：选择IddSampleApp-&gt;完成<br>然后找到这个任务-&gt;安全选项-&gt;选择不管用户是否登录都要运行-&gt;打开不存储密码，该任务只有本地计算机的访问权限-&gt;打开使用最高权限运行<br><img src="/images/21.png" alt="图21"></p><h3 id="配置looking-glass"><a href="#配置looking-glass" class="headerlink" title="配置looking-glass"></a>配置looking-glass</h3><p>编辑&#x2F;etc&#x2F;tmpfiles.d&#x2F;10-looking-glass.conf文件加入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">f <span class="hljs-regexp">/dev/</span>shm/looking-glass <span class="hljs-number">0660</span> user(uid) kvm -<br></code></pre></td></tr></table></figure><p>user(uid)中填入用户的uid<br>接着编辑&#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;99-kvmfr.rules文件添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">SUBSYSTEM</span>==&quot;kvmfr&quot;, <span class="hljs-attribute">OWNER</span>=<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-attribute">GROUP</span>=<span class="hljs-string">&quot;kvm&quot;</span>, <span class="hljs-attribute">MODE</span>=<span class="hljs-string">&quot;0660&quot;</span><br></code></pre></td></tr></table></figure><p>按照以下公式计算数据</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">分辨率的长×分辨率的宽×BBP××<span class="hljs-number">22</span>÷<span class="hljs-number">1024÷1024</span>+<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>其中BPP为4表示SDR,8表示HDR<br>然后把这个数据向上取整到2的整数次幂<br>编辑&#x2F;etc&#x2F;modprobe.d&#x2F;looking-glass.conf文件添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">options kvmfr <span class="hljs-attribute">static_size_mb</span>=你得出的数值<br></code></pre></td></tr></table></figure><p>编辑&#x2F;etc&#x2F;modules-load.d&#x2F;looking-glass.conf文件添加</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kvmfr</span><br></code></pre></td></tr></table></figure><p>编辑&#x2F;etc&#x2F;libvirt&#x2F;qemu.conf文件找到cgroup_device_acl 这行取消它所包括的注释加入&#x2F;dev&#x2F;kvmfr0。如图<br><img src="/images/23.png" alt="图23"><br>如果存在AppArmor也同时创建&#x2F;etc&#x2F;apparmor.d&#x2F;local&#x2F;abstractions&#x2F;libvirt-qemu并且加入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dev/</span>kvmfr0 rw,<br></code></pre></td></tr></table></figure><p>编辑&#x2F;etc&#x2F;looking-glass-client.ini文件加入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[app]</span><br><span class="hljs-attr">shmFile</span>=/dev/kvmfr0<br></code></pre></td></tr></table></figure><p>接着重构内核并重启<br>编辑XML<br>修改首行为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;domain <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;kvm&quot;</span> xmlns:<span class="hljs-attribute">qemu</span>=<span class="hljs-string">&#x27;http://libvirt.org/schemas/domain/qemu/1.0&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>再在倒数二行加入</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">qemu:commandline</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">qemu:arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;-device&#x27;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">qemu:arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;</span></span></span><span class="language-xquery">&#123;<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;ivshmem-plain&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;shmem0&quot;</span>,<span class="hljs-string">&quot;memdev&quot;</span>:<span class="hljs-string">&quot;looking-glass&quot;</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#x27;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">qemu:arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;-object&#x27;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">qemu:arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;</span></span></span><span class="language-xquery">&#123;<span class="hljs-string">&quot;qom-type&quot;</span>:<span class="hljs-string">&quot;memory-backend-file&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;looking-glass&quot;</span>,<span class="hljs-string">&quot;mem-path&quot;</span>:<span class="hljs-string">&quot;/dev/kvmfr0&quot;</span>,<span class="hljs-string">&quot;size&quot;</span>:刚才计算出的数值×<span class="hljs-number">1024</span>×<span class="hljs-number">1024</span>,<span class="hljs-string">&quot;share&quot;</span>:true&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#x27;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">qemu:commandline</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在&lt;&#x2F;devices&gt;内加入两行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;mouse&#x27;</span> <span class="hljs-attribute">bus</span>=<span class="hljs-string">&#x27;virtio&#x27;</span>/&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;keyboard&#x27;</span> <span class="hljs-attribute">bus</span>=<span class="hljs-string">&#x27;virtio&#x27;</span>/&gt;<br></code></pre></td></tr></table></figure><p>找到&lt;memballoon model&#x3D;”virtio”&gt;将其改成&lt;memballoon model&#x3D;”none”&#x2F;&gt;<br>启动虚拟机<br>下载并安装<a href="https://looking-glass.io/downloads">looking-glass-host</a><br>键入win+R输入taskschd.msc<br>创建基本任务-&gt;给任务取个名-&gt;触发器：当前用户登录时-&gt;操作：启动程序-&gt;启动程序：选择C:\Program Files\Looking Glass (host)\looking-glass-host.exe-&gt;完成<br>然后找到这个任务-&gt;安全选项-&gt;打开使用最高权限运行<br>接着关闭windows自动休眠<br>然后把显卡设置成none</p><h3 id="编辑grub"><a href="#编辑grub" class="headerlink" title="编辑grub"></a>编辑grub</h3><p>编辑grub配置文件&#x2F;etc&#x2F;default&#x2F;grub添加启动参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">intel_iommu</span>=on <span class="hljs-attribute">iommu</span>=pt<br></code></pre></td></tr></table></figure><p>如果在直通时出现整个iommu组退回宿主机的问题（之后简称问题1）<br>可以进一步添加以下内核参数（需要包含了ACS补丁的内核）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pcie_acs_override</span>=downstream,multifunction<br></code></pre></td></tr></table></figure><p>并更新配置文件并且重启</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">grub-mkconfig -o <span class="hljs-regexp">/boot/g</span>rub/grub.cfg<br></code></pre></td></tr></table></figure><p>进行检验,执行</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">sudo dmesg <span class="hljs-string">| grep -e DMAR -e IOMMU</span><br></code></pre></td></tr></table></figure><p>如果出现输出结果则说明成功</p><h3 id="查询iommu分组"><a href="#查询iommu分组" class="headerlink" title="查询iommu分组"></a>查询iommu分组</h3><p>运行以下脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">shopt</span> -s nullglob<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> /sys/kernel/iommu_groups/*/devices/*; <span class="hljs-keyword">do</span> <br>   n=<span class="hljs-variable">$&#123;d#*/iommu_groups/*&#125;</span>; n=<span class="hljs-variable">$&#123;n%%/*&#125;</span><br>   <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;IOMMU Group %s &#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span><br>   lspci -nns <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;d##*/&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span>;<br></code></pre></td></tr></table></figure><p>找到需要直通显卡的iommu分组，记下分组中所有硬件对应的id备用<br><img src="/images/20.png" alt="图20"><br>如图我要直通的显卡是3060，它处于iommu16分组，那么我需要记下的id为10de:2520和10de:228e(如果出现问题1,则只需要记下显卡所对应的id，不需要直通整个iommu组)<br>接着编辑&#x2F;etc&#x2F;modprobe.d&#x2F;vfio.conf<br>在其中以如下格式添加记下的所有id</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> vfio-pci ids=<span class="hljs-number">10</span>de:<span class="hljs-number">2520</span>,<span class="hljs-number">10</span>de:<span class="hljs-number">228</span>e<br></code></pre></td></tr></table></figure><p>接着编辑&#x2F;etc&#x2F;mkinitcpio.conf在MODULES&#x3D;()中加入vfio_pci vfio vfio_iommu_type1<br>等底下hooks配置完以后自行配置在开机30s后执行teardown脚本即可正常使用显卡<br>重构内核并重启</p><h3 id="配置hooks"><a href="#配置hooks" class="headerlink" title="配置hooks"></a>配置hooks</h3><p>随意找个目录执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/risingprismtv/</span>single-gpu-passthrough.git<br></code></pre></td></tr></table></figure><p>进入目录再进入hooks文件夹<br>编辑vfio-startup把里面内容换成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -x<br><br>MARKER=<span class="hljs-string">&quot;/tmp/my_script_has_run&quot;</span><br><br><span class="hljs-keyword">if</span> [[ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$MARKER</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">touch</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MARKER</span>&quot;</span><br>systemctl stop sddm<br><span class="hljs-built_in">sleep</span> 2<br>fuser -v /dev/nvidia* |awk <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i++)print &quot;kill -9 &quot; $i;&#125;&#x27;</span> | sh<br>rmmod -f nvidia_drm <br>rmmod -f nvidia_modeset<br>rmmod -f nvidia_uvm<br>rmmod -f nvidia<br><span class="hljs-built_in">sleep</span> 1<br>virsh nodedev-detach pci_0000_02_00_0<br>modprobe vfio_pci<br>modprobe vfio<br>modprobe vfio_iommu_type1<br><span class="hljs-built_in">sleep</span> 1<br>systemctl start sddm<br><br><span class="hljs-keyword">else</span><br>fuser -v /dev/nvidia* |awk <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i++)print &quot;kill -9 &quot; $i;&#125;&#x27;</span> | sh<br><span class="hljs-built_in">sleep</span> 2<br>rmmod -f nvidia_drm <br>rmmod -f nvidia_modeset<br>rmmod -f nvidia_uvm<br>rmmod -f nvidia<br><span class="hljs-built_in">sleep</span> 1<br>virsh nodedev-detach pci_0000_02_00_0<br>modprobe vfio_pci<br>modprobe vfio<br>modprobe vfio_iommu_type1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>注意:此脚本一旦执行就会杀死所有占用n卡的程序</p><p>接着编辑vfio-teardown把里面内容换成</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> -x<br>modprobe <span class="hljs-comment">-r vfio_pci</span><br>modprobe <span class="hljs-comment">-r vfio</span><br>modprobe <span class="hljs-comment">-r vfio_iommu_type1</span><br>sleep <span class="hljs-comment">1</span><br>virsh <span class="hljs-comment">nodedev-reattach pci_0000_A1_B1_C1</span><br>sleep <span class="hljs-comment">1</span><br>modprobe <span class="hljs-comment">nvidia</span><br>modprobe <span class="hljs-comment">nvidia_modeset</span><br>modprobe <span class="hljs-comment">nvidia_uvm</span><br>modprobe <span class="hljs-comment">nvidia_drm</span><br></code></pre></td></tr></table></figure><p>sleep的时间自行测试<br>pci_0000_A1_B1_C1填iommu分组与显卡同组的所有ID<br>重启libvirt服务</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo systemctl restart libvirtd virtlogd.<span class="hljs-built_in">socket</span><br></code></pre></td></tr></table></figure><p>修改qemu<br>把$OBJECT &#x3D;&#x3D; “”里面替换成自己的虚拟机名<br>之后运行install_hooks.sh<br>打开virt-manager -&gt; 添加硬件 -&gt; PCI主机设备<br>添加需要直通的显卡和显卡同iommu组的其他设备<br>启动虚拟机<br>再次打开virt-manager可以看到虚拟机已经启动<br>接着为虚拟机安装驱动</p><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成!"></a>大功告成!</h3><p>你在重启后可以使用looking-glass-client来访问虚拟机</p><h1 id="四、参考教程"><a href="#四、参考教程" class="headerlink" title="四、参考教程"></a>四、参考教程</h1><p><a href="https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF">https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF</a><br><a href="https://looking-glass.io/">https://looking-glass.io/</a><br><a href="https://gitlab.com/risingprismtv/single-gpu-passthrough">https://gitlab.com/risingprismtv/single-gpu-passthrough</a><br><a href="https://www.bilibili.com/video/BV1Er4y1i7pq/?spm_id_from=333.337.search-card.all.click&vd_source=8090ef867fc52ca54eca33de8f1ff58f">https://www.bilibili.com/video/BV1Er4y1i7pq/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;8090ef867fc52ca54eca33de8f1ff58f</a><br><a href="https://lostattractor.net/archives/nixos-gpu-vfio-passthrough#%E4%BD%BF%E7%94%A8">https://lostattractor.net/archives/nixos-gpu-vfio-passthrough#%E4%BD%BF%E7%94%A8</a><br><a href="https://gitlab.com/liucreator/LEDs-single-gpu-passthrough">https://gitlab.com/liucreator/LEDs-single-gpu-passthrough</a><br><a href="https://lantian.pub/article/modify-computer/laptop-muxed-nvidia-passthrough.lantian/">https://lantian.pub/article/modify-computer/laptop-muxed-nvidia-passthrough.lantian/</a><br><a href="https://blog.rachelt.one/articles/fake-display-for-moonlight/">https://blog.rachelt.one/articles/fake-display-for-moonlight/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
